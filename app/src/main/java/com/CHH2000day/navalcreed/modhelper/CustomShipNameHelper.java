package com.CHH2000day.navalcreed.modhelper;
import java.io.*;
import java.util.*;
import okio.*;
import com.orhanobut.logger.*;

public class CustomShipNameHelper
{
	public static CustomShipNameHelper mcsh;
	public synchronized static CustomShipNameHelper getInstance()
	{
		if (mcsh == null)
		{mcsh = new CustomShipNameHelper();}
		return mcsh;
	}
	private HashMap<Integer,String> shipnames;
	private ArrayList idList;
	//Contains all ships' id

	private static final String HOF="return\n{\n";
	private static final String EOC="}";
	private static final String EOF ="--[[ Generated by NavalCreedModHelper ]]";
	private static final String STATEMENT=" [%d] = \"%s\";";

	public void init(File src)
	{
		try
		{
			doInit(src);
		}
		catch (IOException e)
		{
			Logger.e(e, "Failed to load shipnames");
		}
	}
	private void doInit(File src) throws IOException
	{
		if (shipnames == null || idList == null)
		{
			shipnames = new HashMap<Integer,String>();
			idList = new ArrayList();
		}
		shipnames.clear();
		idList.clear();
		Source s=Okio.source(src);
		BufferedSource bs=Okio.buffer(s);
		String orig=bs.readUtf8();
		bs.close();
		s.close();
		String[] raw=orig.split("\n");
		char[] line=null;
		String str=null;
		ArrayList ids=new ArrayList();
		StringBuilder id=new StringBuilder();
		StringBuilder name=new StringBuilder();
		boolean isInId=false;
		boolean isInName=false;
		for (int i=0;i < raw.length;i++)
		{
			str = raw[i].trim();
			if (str.startsWith("--") || str.startsWith("]]") || str.startsWith("return") || str.startsWith("{") || str.startsWith("}"))
			{
				continue;
			}
			line = str.toCharArray();
			for (char c:line)
			{
				if (c == '"')
				{
					isInName = !isInName;
				}
				else if (isInName)
				{
					name.append(c);
				}
				else if (c == ']')
				{
					isInId = false;
				}
				else if (isInId)
				{
					id.append(c);
				}
				else if (c == '[')
				{

					isInId = false;
				}
			}
			//end of each line's resolve
			if (id.length() > 0 && name.length() > 0)
			{
				int shipId=Integer.valueOf(id.toString());
				ids.add(shipId);
				shipnames.put(shipId, name.toString());
			}
			id.delete(0, id.length());
			name.delete(0, name.length());
			//reset StringBuilders after each loop
		}
		//end of all loops
		Collections.sort(ids);
	}
	private void writeToFile(File dest) throws IOException
	{
		Sink s=Okio.sink(dest);
		BufferedSink bs=Okio.buffer(s);
		ListIterator li=idList.listIterator();
		String name="";
		String empty="";
		bs.writeUtf8(HOF);
		while (li.hasNext())
		{
			int i=(Integer)li.next();
			name = shipnames.getOrDefault(i, name);
			if (name.equals(empty))
			{continue;}
			bs.writeUtf8(String.format(STATEMENT, i, shipnames.get(i)));
			bs.writeUtf8("\n");

		}
		bs.writeUtf8(EOC);
		bs.writeUtf8(EOF);
		bs.close();
		s.close();
	}

}
