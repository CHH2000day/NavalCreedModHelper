package com.CHH2000day.navalcreed.modhelper;

import android.os.Build;
import android.text.TextUtils;

import com.orhanobut.logger.Logger;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.ListIterator;

import okio.BufferedSink;
import okio.BufferedSource;
import okio.Okio;
import okio.Sink;
import okio.Source;

public class CustomShipNameHelper {
    private static final String HOF = "return\n{\n";
    private static final String EOC = "}";
    private static final String EOF = "--[[ Generated by NavalCreedModHelper ]]";
    private static final String STATEMENT = " [%d] = \"%s\";";
    //Contains all ships' id
    public static CustomShipNameHelper mcsh;
    private static boolean inited = false;
    private HashMap<Integer, String> shipnames;
    private ArrayList idList;
    private File luafile;

    public synchronized static CustomShipNameHelper getInstance() {
        if (mcsh == null) {
            mcsh = new CustomShipNameHelper();
        }
        return mcsh;
    }

    public void init(File src) {
        if (inited) return;
        try {
            doInit(src);
        } catch (IOException e) {
            Logger.e(e, "Failed to load shipnames");
        }
    }

    public boolean patch(BufferedSource src) {
        return patch(src, this.luafile);
    }
    /**
     * @param src  patch data
     * @param dest customshipnames.lua
     * @return isSuccess
     */
    public boolean patch(BufferedSource src, File dest) {
        boolean isSuccess = false;
        try {
            isSuccess = execPatch(src) == 0;
            if (isSuccess) {
                writeToFile(dest);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return isSuccess;
    }

    /**
     * @param src patch data
     * @return Line number of wrong statement,return 0 if everything works
     * @throws IOException
     */
    private int execPatch(BufferedSource src) throws IOException {
        int err_pos = 0;
        //Read patch
        String[] lines = src.readUtf8().split("\n");
        src.close();
        //Explain and execute it
        synchronized (shipnames) {
            String[] cmd = null;
            HashMap<Integer, String> buffer = shipnames;

            for (int i = 0; i < lines.length && err_pos < 1; i++) {
                try {
                    lines[i].trim();
                    //"#" is a mark of comment,no need to process it
                    if (lines[i].length() < 2 || lines[i].startsWith("#")) {
                        continue;
                    }
                    cmd = lines[i].split(",", 3);
                    switch (cmd[0]) {
                        case "set":
                        case "def":
                            buffer.put(Integer.valueOf(cmd[1]), cmd[2]);
                            break;
                        case "del":
                            buffer.remove(Integer.valueOf(cmd[1]));
                            break;
                        default:
                            throw new UnknownActionException("Unknown action at line " + i + 1 + " :" + cmd[0]);

                    }
                } catch (Throwable t) {
                    err_pos = i + 1;
                    Logger.e(t, "Error at line:" + err_pos);
                }
            }
            if (err_pos == 0) {
                shipnames = buffer;
                syncIDList();
            }
        }

        return err_pos;
    }

    void syncIDList() {
        synchronized (idList) {
            idList = new ArrayList(shipnames.keySet());
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
                Collections.sort(idList);
            } else {
                idList.sort(new Comparator<Integer>() {
                    @Override
                    public int compare(Integer o1, Integer o2) {
                        // TODO Auto-generated method stub
                        if ((int) o1 < (int) o2) return -1;
                        else return 1;
                    }
                });

            }
        }
    }
    private void doInit(File src) throws IOException {
        this.luafile = src;
        if (shipnames == null || idList == null) {
            shipnames = new HashMap<Integer, String>();
            idList = new ArrayList();
        }
        shipnames.clear();
        idList.clear();
        Source s = Okio.source(src);
        BufferedSource bs = Okio.buffer(s);
        String orig = bs.readUtf8();
        bs.close();
        s.close();
        if (TextUtils.isEmpty(orig)) {
            return;
        }
        String[] raw = orig.split("\n");
        char[] line = null;
        String str = null;
        ArrayList ids = new ArrayList();
        String id = null;
        String name = null;
        ;
        boolean isInId = false;
        boolean isInName = false;
        for (int i = 0; i < raw.length; i++) {
            str = raw[i].trim();
            if (str.startsWith("--") || str.startsWith("]]") || str.startsWith("return") || str.startsWith("{") || str.startsWith("}")) {
                continue;
            }
            id = str.substring(str.indexOf('[') + 1, str.indexOf(']'));
            name = str.substring(str.indexOf('\"') + 1, str.lastIndexOf('"'));
            //end of each line's resolve
            int shipId = Integer.valueOf(id);
            ids.add(shipId);
            shipnames.put(shipId, name);

            id = null;
            name = null;
            //reset StringBuilders after each loop
        }
        //end of all loops

        idList = ids;
        syncIDList();
        inited = true;
    }

    private void writeToFile(File dest) throws IOException {
        Sink s = Okio.sink(dest);
        BufferedSink bs = Okio.buffer(s);
        ListIterator li = idList.listIterator();
        String name = "";
        String empty = "";
        bs.writeUtf8(HOF);
        while (li.hasNext()) {
            int i = (Integer) li.next();
            name = shipnames.get(i);
            if (name.equals(empty)) {
                continue;
            }
            bs.writeUtf8(String.format(STATEMENT, i, shipnames.get(i)));
            bs.writeUtf8("\n");

        }
        bs.writeUtf8(EOC);
        bs.writeUtf8("\n");
        bs.writeUtf8(EOF);
        bs.close();
        s.close();
    }

    private class UnknownActionException extends Exception {
        public UnknownActionException(String msg) {
            super(msg);
        }
    }
}
